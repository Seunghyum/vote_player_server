import mongoose from "mongoose";
import Bills from "@models/bills";
import BillVoteResults from "@models/billVoteResults";
import { getBillVoteResults } from "src/apis/bills/Î≤ïÎ•†Ïïà_ÌëúÍ≤∞Í≤∞Í≥º";
import connectDB from "./utils/connectDB";
import Candidates from "@models/candidates";

async function Î∞úÏùòÎ≤ïÎ•†Ïïà_ÌëúÍ≤∞Í≤∞Í≥º() {
  const bills = await Bills.find({
    PROC_RESULT: { $nin: ["Í≥ÑÎ•ò", "Ï≤†Ìöå", "ÎåÄÏïàÎ∞òÏòÅÌèêÍ∏∞", "ÏûÑÍ∏∞ÎßåÎ£åÌèêÍ∏∞"] },
  });
  console.log(`üìÑ Ï¥ù ${bills.length}Í∞úÏùò ÏùòÏïàÏùÑ Ï≤òÎ¶¨Ìï©ÎãàÎã§`);

  const deletedResult = await BillVoteResults.deleteMany({ AGE: "22" });
  console.log(
    `üóëÔ∏è ÏÇ≠Ï†ú ÏôÑÎ£å: Í∏∞Ï°¥ ${deletedResult.deletedCount}Í∞úÏùò Î¨∏ÏÑúÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.`
  );

  for (const bill of bills) {
    const { AGE, BILL_ID, _id: billObjectId } = bill;

    if (!AGE || !BILL_ID) {
      console.warn(`‚ö†Ô∏è BILL_ID ÎòêÎäî AGE ÎàÑÎùΩ: ${bill.BILL_NAME}`);
      continue;
    }

    try {
      const res = await getBillVoteResults({
        AGE: AGE as string,
        BILL_ID: BILL_ID as string,
        pSize: 300, // Ï¥ù ÏùòÏõê Ïàò 300
        pIndex: 1,
      });

      if (res.code !== 200 || !res.items?.length) {
        console.log(`üö´ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå: ${bill.BILL_NAME}`);
        continue;
      }

      // Ï§ëÎ≥µ Ï†ÄÏû• Î∞©ÏßÄÎ•º ÏúÑÌï¥ BILL_ID + MONA_CD Í∏∞Ï§ÄÏúºÎ°ú delete ÌõÑ insert
      await BillVoteResults.deleteMany({ BILL_ID, bill: billObjectId });
      const voteDocs = [];
      for (const item of res.items) {
        if (item.HG_NM === "Ï°∞Íµ≠") {
          voteDocs.push({
            ...item,
            bill: billObjectId,
            candidate: null,
          });
          continue;
        }
        const candidate = await Candidates.findOne({
          koName: item.HG_NM,
        });

        if (!candidate?._id) {
          console.log(`${item.HG_NM}Ïóê Ìï¥ÎãπÌïòÎäî candidateÍ∞Ä ÏóÜÏäµÎãàÎã§.`);
        }
        voteDocs.push({
          ...item,
          bill: billObjectId,
          candidate: candidate?._id,
        });
      }
      // });

      await BillVoteResults.insertMany(voteDocs);
      console.log(`‚úÖ Ï†ÄÏû• ÏôÑÎ£å: ${bill.BILL_NAME} (${voteDocs.length}Í±¥)`);
    } catch (err) {
      console.error(`‚ùå Ï≤òÎ¶¨ Ïã§Ìå®: ${bill.BILL_NAME}`, err);
    }
  }

  console.log("üéâ Ï†ÑÏ≤¥ ÏûëÏóÖ ÏôÑÎ£å");
}

connectDB()
  .then(async () => {
    await Î∞úÏùòÎ≤ïÎ•†Ïïà_ÌëúÍ≤∞Í≤∞Í≥º();
  })
  .then(() => mongoose.disconnect())
  .catch((err) => {
    console.error("‚ùå Error occurred:", err);
    mongoose.disconnect();
  });
