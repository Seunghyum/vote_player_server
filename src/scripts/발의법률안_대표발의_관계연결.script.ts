import mongoose from "mongoose";

import Candidate from "@models/candidates"; // Î™®Îç∏ Í≤ΩÎ°úÏóê ÎßûÍ≤å ÏàòÏ†ï
import Bill from "@models/bills"; // Î™®Îç∏ Í≤ΩÎ°úÏóê ÎßûÍ≤å ÏàòÏ†ï
import connectDB from "./utils/connectDB";

async function linkCandidatesAndBills() {
  // 1. Î™®Îì† BillsÏùò publ_candidates Ï¥àÍ∏∞Ìôî
  await Bill.updateMany({}, { $set: { rst_candidates: [] } });
  console.log("üßπ Bills.rst_candidates Ï¥àÍ∏∞Ìôî ÏôÑÎ£å");

  // 2. Î™®Îì† CandidatesÏùò publ_bills Ï¥àÍ∏∞Ìôî
  await Candidate.updateMany({}, { $set: { rst_bills: [] } });
  console.log("üßπ Candidates.rst_bills Ï¥àÍ∏∞Ìôî ÏôÑÎ£å");

  const candidates = await Candidate.find();

  for (const candidate of candidates) {
    const { koName, _id: candidateId } = candidate;

    // koNameÏù¥ RST_PROPOSERÏù∏ Bills Ï∞æÍ∏∞
    const bills = await Bill.find({ RST_PROPOSER: koName });

    if (bills.length === 0) continue;

    const billIds = bills.map((bill) => bill._id);

    // Candidate Î™®Îç∏Ïùò bills ÌïÑÎìú ÏóÖÎç∞Ïù¥Ìä∏
    await Candidate.updateOne(
      { _id: candidateId },
      { $addToSet: { rst_bills: { $each: billIds } } }
    );

    // Í∞Å BillÏùò rst_candidates ÌïÑÎìúÏóê candidateId Ï∂îÍ∞Ä
    const billUpdatePromises = bills.map((bill) =>
      Bill.updateOne(
        { _id: bill._id },
        { $addToSet: { rst_candidates: candidateId } }
      )
    );

    await Promise.all(billUpdatePromises);

    console.log(
      `‚úÖ Linked ${bills.length} bills to candidate '${koName}' (${candidateId})`
    );
  }

  console.log("üîó All candidates and bills are linked.");
  // await mongoose.disconnect();
}

connectDB()
  .then(async () => {
    await linkCandidatesAndBills();
  })
  .then(() => mongoose.disconnect())
  .catch((err) => {
    console.error("‚ùå Error occurred:", err);
    mongoose.disconnect();
  });
